#!/usr/bin/env node

/**************************************************************************************************
 * hoobs-gui                                                                                      *
 * Copyright (C) 2020 HOOBS                                                                       *
 *                                                                                                *
 * This program is free software: you can redistribute it and/or modify                           *
 * it under the terms of the GNU General Public License as published by                           *
 * the Free Software Foundation, either version 3 of the License, or                              *
 * (at your option) any later version.                                                            *
 *                                                                                                *
 * This program is distributed in the hope that it will be useful,                                *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of                                 *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                  *
 * GNU General Public License for more details.                                                   *
 *                                                                                                *
 * You should have received a copy of the GNU General Public License                              *
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.                          *
 **************************************************************************************************/

const Program = require("commander");
const Prompt = require("prompts");
const { join, dirname } = require("path");
const { execSync } = require("child_process");

const {
    existsSync,
    mkdirSync,
    realpathSync,
    readFileSync,
    writeFileSync,
} = require("fs-extra");

const root = join(dirname(realpathSync(__filename)), "../");
const pjson = JSON.parse(readFileSync(join(root, "package.json")).toString());

Program.version(pjson.version, "-v, --version", "output the current version")
    .allowUnknownOption();

Program.command("gui", { isDefault: true })
    .description("build hoobs gui")
    .option("-l, --lint", "lint the code before building")
    .option("-p, --pack", "create pack file for offline testing")
    .action((command) => {
        if (command.lint) {
            execSync(`${join(root, "node_modules", ".bin", "vue-cli-service")} lint`, {
                cwd: root,
                stdio: "inherit",
            });
        }

        if (!existsSync(join(root, "lib"))) {
            mkdirSync(join(root, "lib"));
        }

        execSync(`${join(root, "node_modules", ".bin", "rimraf")} ${join(root, "lib")}`, {
            cwd: root,
            stdio: "inherit",
        });

        execSync(`${join(root, "node_modules", ".bin", "vue-cli-service")} build`, {
            cwd: root,
            stdio: "inherit",
        });

        if (command.pack) {
            const pack = JSON.parse(JSON.stringify(pjson));

            delete pack.scripts;
            delete pack.dependencies;
            delete pack.devDependencies;

            writeFileSync(join(root, "package.json"), JSON.stringify(pack, null, 4));

            execSync("yarn pack", {
                cwd: root,
                stdio: "inherit",
            });

            execSync(`mv ${join(root, `hoobs-gui-v${pjson.version}.tgz`)} ${join(root, "lib", "package.tgz")}`, {
                cwd: root,
                stdio: "inherit",
            });

            execSync(`chmod 755 ${join(root, "lib", "package.tgz")}`, {
                cwd: root,
                stdio: "inherit",
            });

            writeFileSync(join(root, "package.json"), JSON.stringify(pjson, null, 4));
        }

        if (process.env.SUDO_USER && process.env.SUDO_USER !== process.env.USER) {
            execSync(`chown -R ${process.env.SUDO_USER} ${join(root, "lib")}`, {
                cwd: root,
                stdio: "inherit",
            });
        }
    });

Program.command("publish")
    .description("publish the gui to npm")
    .action(() => {
        const questions = [
            {
                type: "text",
                name: "confirm",
                initial: "no",
                message: "type yes to confirm",
                format: (value) => value.toLowerCase(),
            },
        ];

        Prompt(questions).then((result) => {
            if (result && result.confirm === "yes") {
                execSync(`${join(root, "bin", "build")} gui`, {
                    cwd: root,
                    stdio: "inherit",
                });

                const pack = JSON.parse(JSON.stringify(pjson));

                delete pack.scripts;
                delete pack.dependencies;
                delete pack.devDependencies;

                writeFileSync(join(root, "package.json"), JSON.stringify(pack, null, 4));

                execSync("yarn publish --access public", {
                    cwd: root,
                    stdio: "inherit",
                });

                writeFileSync(join(root, "package.json"), JSON.stringify(pjson, null, 4));
            }
        });
    });

Program.parse(process.argv);
